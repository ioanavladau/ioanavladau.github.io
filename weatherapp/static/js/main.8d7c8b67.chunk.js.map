{"version":3,"sources":["components/profile/Profile.js","components/profile/ProfilePage.js","components/button/ButtonWithProps.js","components/button/ButtonWithChild.js","components/button/NewComponent.js","components/button/ButtonPage.js","components/theme/ThemePage.js","App.js","serviceWorker.js","index.js"],"names":["Profile","console","log","this","props","profileInfo","image","name","age","hobbies","foods","src","alt","map","hobby","index","key","food","React","Component","ProfilePage","profiles","profile","ButtonWithProps","handleClick","event","informButtonPage","buttonText","customStyle","onClick","className","style","ButtonWithChild","children","NewComponent","backgroundColor","ButtonPage","handleButtonClicks","text","btnProperties","ThemePage","onColorChange","type","onChange","target","value","message","App","handleColorChange","color","setState","state","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAiCeA,G,uLA5BPC,QAAQC,IAAIC,KAAKC,OADZ,MAGwCD,KAAKC,MAAMC,YAAhDC,EAHH,EAGGA,MAAOC,EAHV,EAGUA,KAAMC,EAHhB,EAGgBA,IAAKC,EAHrB,EAGqBA,QAASC,EAH9B,EAG8BA,MAEnC,OACI,6BACI,yBAAKC,IAAKL,EAAOM,IAAI,WACrB,sCAAYL,GACZ,qCAAWC,GACX,wCACI,4BACKC,EAAQI,KAAI,SAACC,EAAOC,GAAR,OACT,wBAAIC,IAAKF,EAAQC,GAAQD,QAIrC,6CAEI,4BACKJ,EAAMG,KAAI,SAACI,EAAMF,GAAP,OAAiB,wBAAIC,IAAKD,GAAQE,a,GArB/CC,IAAMC,YCAPC,E,iLAGb,IAAMX,EAAU,CAAC,SAAU,UAkBrBY,EAAW,CAhBE,CACfd,KAAM,QACNC,IAAK,GACLF,MAAO,mCACPG,QAASA,EACTC,MAAO,CAAC,QAAS,SAAU,UAGV,CACjBH,KAAM,SACNC,IAAK,GACLF,MAAO,mCACPG,QAASA,EACTC,MAAO,CAAC,QAAS,SAAU,WAK/B,OACI,6BACKW,EAASR,KAAI,SAACS,EAASP,GACpB,OAAO,kBAAC,EAAD,CAASC,IAAK,UAAYD,EAAOV,YAAaiB,Y,GA1BhCJ,IAAMC,W,gBCqBhCI,E,2MArBXC,YAAc,SAACC,GAEX,EAAKrB,MAAMsB,iBAAiB,kC,wEAIvB,IAAD,EACgCvB,KAAKC,MAAjCuB,EADJ,EACIA,WAAYC,EADhB,EACgBA,YAGpB,OACI,6BACI,4BAAQC,QAAS1B,KAAKqB,YAAaM,UAAU,WAAWC,MAAOH,GAAcD,GAA0B,e,GAbzFT,IAAMC,WCAfa,G,uLACP,IAAD,EAEkC7B,KAAKC,MAApC6B,EAFH,EAEGA,SAAUP,EAFb,EAEaA,iBAGlB,OAFAzB,QAAQC,IAAIC,KAAKC,OAGb,4BAAQyB,QAAS,kBAAMH,EAAiB,mCAAmCO,O,GAP1Cf,IAAMC,YCA9Be,E,iLACP,IAEED,EAAa9B,KAAKC,MAAlB6B,SAGR,OAFAhC,QAAQC,IAAIC,KAAKC,OAIb,4BAAQ2B,MAAO,CAACI,gBAAiBF,IAAjC,qB,GAR8Bf,IAAMC,WCiCjCiB,E,2MA5BXC,mBAAqB,SAACC,GAClBrC,QAAQC,IAAIoC,I,wEAMZ,IAAMC,EACY,qBAGlB,OACI,6BACI,sDACA,kBAAC,EAAD,CAAiBb,iBAAkBvB,KAAKkC,qBACxC,kBAAC,EAAD,CAAiBX,iBAAkBvB,KAAKkC,mBAAoBV,WAAYY,EAA0BX,YAAa,CAACO,gBAAiB,eACjI,kBAAC,EAAD,CAAiBT,iBAAkBvB,KAAKkC,mBAAoBV,WAAYY,EAA0BX,YAAa,CAACO,gBAAiB,gBACjI,kBAAC,EAAD,CAAiBT,iBAAkBvB,KAAKkC,oBAAxC,mBAGA,kBAAC,EAAD,CAAcX,iBAAkBvB,KAAKkC,oBAArC,Y,GArBSnB,IAAMC,WCHVqB,E,iLACP,IACEC,EAAkBtC,KAAKC,MAAvBqC,cAER,OACI,6BACI,0CACA,2BAAOC,KAAK,QAAQC,SAAU,SAAAlB,GAAK,OAAIxB,QAAQC,IAAIuB,EAAMmB,OAAOC,UAChE,kBAAC,EAAD,CAAiBnB,iBAAkB,SAACoB,GAAD,OAAaL,EAAcK,W,GARvC5B,IAAMC,WCyD9B4B,E,YApDb,WAAY3C,GAAQ,IAAD,8BACjB,4CAAMA,KAMR4C,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAACf,gBAAiBc,KANhC,EAAKE,MAAQ,CACXhB,gBAAiB,OAHF,E,sEAWT,IACAA,EAAoBhC,KAAKgD,MAAzBhB,gBAER,OACE,kBAAC,IAAD,KACE,yBAAKJ,MAAO,CAACI,gBAAiBA,IAC5B,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMiB,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,uDAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAWC,UAAWnC,IACxC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,WAAWC,UAAWnB,IACxC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,CAAWb,cAAetC,KAAK6C,4B,GA5C3B9B,IAAMC,WCKJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d7c8b67.chunk.js","sourcesContent":["import React from 'react';\n// import userPicture from '../../assets/images/user.jpg';\n\nclass Profile extends React.Component {\n    render() {\n        console.log(this.props);\n\n        const { image, name, age, hobbies, foods } = this.props.profileInfo;\n\n        return (\n            <div>\n                <img src={image} alt=\"my-pic\"/>\n                <div>Name: {name}</div>\n                <div>Age: {age}</div>\n                <div>Hobbies: \n                    <ul>\n                        {hobbies.map((hobby, index) => \n                            <li key={hobby + index}>{hobby}</li>\n                        )}                    \n                    </ul>\n                </div>\n                <div>\n                    Foods I like:\n                    <ul>\n                        {foods.map((food, index) => <li key={index}>{food}</li>)}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\n\nexport default class ProfilePage extends React.Component {\n    render() {\n        // const { image, name, age, hobbies, foods } = this.props.profileInfo;\n        const hobbies = ['Hobby1', 'Hobby2'];\n\n        const profileOne = {\n            name: \"Ioana\",\n            age: 23,\n            image: 'https://placeimg.com/640/480/any',\n            hobbies: hobbies,\n            foods: ['Pizza', 'Burger', 'Candy']\n        };\n      \n          const profileTwo = {\n            name: \"Marija\",\n            age: 28,\n            image: 'https://placeimg.com/640/480/any',\n            hobbies: hobbies,\n            foods: ['Bread', 'Burger', 'Candy']\n        };\n\n        const profiles = [profileOne, profileTwo];\n            \n        return (\n            <div>\n                {profiles.map((profile, index) => {\n                    return <Profile key={\"profile\" + index} profileInfo={profile}/>\n                })}\n            </div>\n        )\n    }    \n}\n\n","import React from 'react';\n\nclass ButtonWithProps extends React.Component {\n    handleClick = (event) => {\n        // console.log(this.props)\n        this.props.informButtonPage(\"Button with Props was clicked\");\n    }\n    \n\n    render(){\n        const { buttonText, customStyle } = this.props;\n\n\n        return(\n            <div>\n                <button onClick={this.handleClick} className=\"btn pink\" style={customStyle}>{buttonText ? buttonText : \"Submit\"}</button>\n                {/* <button style={customStyle}>This is a button</button> */}\n                {/* <button className=\"btn pink\">{buttonText}</button> */}\n            </div>\n            \n        )\n    }\n}\n\nexport default ButtonWithProps;","import React from 'react';\n\nexport default class ButtonWithChild extends React.Component {\n    render() {\n\n        const { children, informButtonPage } = this.props;\n        console.log(this.props);\n\n        return(\n            <button onClick={() => informButtonPage(\"Button with Child was clicked\")}>{children}</button>\n        )\n    }\n}","import React from 'react';\n\nexport default class NewComponent extends React.Component {\n    render() {\n\n        const { children } = this.props;\n        console.log(this.props);\n\n        return(\n            // <button onClick={console.log} style={{backgroundColor: children}}>New Component</button>\n            <button style={{backgroundColor: children}}>New Component</button>\n        )\n    }\n}","import React from 'react';\nimport ButtonWithProps from './ButtonWithProps'\nimport \"./ButtonPage.css\"\nimport ButtonWithChild from \"./ButtonWithChild\"\nimport NewComponent from \"./NewComponent\"\n\nclass ButtonPage extends React.Component {\n    handleButtonClicks = (text) => {\n        console.log(text);\n        // console.log(this.props);\n        // this.props.informButtonPage(\"Button with Props was clicked\");\n    }\n\n    render(){\n        const btnProperties = {\n            \"buttonText\": \"Custom button text\"\n        };\n\n        return(\n            <div>\n                <p>This is the button page</p>\n                <ButtonWithProps informButtonPage={this.handleButtonClicks}/>\n                <ButtonWithProps informButtonPage={this.handleButtonClicks} buttonText={btnProperties.buttonText} customStyle={{backgroundColor: \"lightblue\"}}/>\n                <ButtonWithProps informButtonPage={this.handleButtonClicks} buttonText={btnProperties.buttonText} customStyle={{backgroundColor: \"lightgreen\"}}/>\n                <ButtonWithChild informButtonPage={this.handleButtonClicks}>\n                    This is a child\n                </ButtonWithChild>\n                <NewComponent informButtonPage={this.handleButtonClicks}>\n                    red\n                </NewComponent>\n            </div>\n        )\n    }\n}\n\nexport default ButtonPage;","import React from \"react\";\nimport ButtonWithProps from \"../button/ButtonWithProps\";\n\nexport default class ThemePage extends React.Component {\n    render() {\n        const { onColorChange } = this.props;\n\n        return (\n            <div>\n                <h1>Theme Page</h1>\n                <input type=\"color\" onChange={event => console.log(event.target.value)}></input>\n                <ButtonWithProps informButtonPage={(message) => onColorChange(message)}/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport ProfilePage from './components/profile/ProfilePage'; \nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport ButtonPage from './components/button/ButtonPage';\nimport ThemePage from './components/theme/ThemePage';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundColor: \"red\"\n    };\n  }\n\n  handleColorChange = (color) => {\n    this.setState({backgroundColor: color});\n  }\n\n  render() {\n    const { backgroundColor } = this.state;\n\n    return (\n      <Router>\n        <div style={{backgroundColor: backgroundColor}}>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/profile\">Profile</Link>\n              </li>\n              <li>\n                <Link to=\"/buttons\">Buttons</Link>\n              </li>\n              <li>\n                <Link to=\"/theme\">Theme</Link>\n              </li>\n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route exact path=\"/\">\n              <div>This is the home page</div>\n            </Route>\n            <Route exact path=\"/profile\" component={ProfilePage} />\n            <Route exact path=\"/buttons\" component={ButtonPage} />\n            <Route exact path=\"/theme\" >\n              <ThemePage onColorChange={this.handleColorChange} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}