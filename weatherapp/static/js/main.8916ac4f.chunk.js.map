{"version":3,"sources":["components/profile/Profile.js","components/profile/ProfilePage.js","components/button/ButtonWithProps.js","components/button/ButtonWithChild.js","components/button/ButtonPage.js","components/theme/ThemePage.js","components/form/FormPage.js","components/cities/CitiesPage.js","App.js","serviceWorker.js","index.js"],"names":["Profile","this","props","profileInfo","img","name","age","hobbies","src","alt","map","element","index","key","React","Component","ProfilePage","profiles","className","profile","ButtonWithProps","handleClick","event","informButtonPage","buttonText","customStyle","onClick","style","ButtonWithChild","children","ButtonPage","handleButtonClicks","text","console","log","backgroundColor","ThemePage","submitColorChange","onColorChange","state","color","history","push","type","onChange","setState","target","value","FormPage","handleChange","id","onSubmit","firstName","lastName","onUserSubmit","placeholder","CitiesPage","cities","fetch","then","response","json","city","columns","Header","accessor","data","App","handleColorChange","localStorage","setItem","handleUserSubmit","getItem","basename","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8916ac4f.chunk.js","sourcesContent":["import React from 'react';\n\nclass Profile extends React.Component {\n    render() {\n        const { img, name, age, hobbies } = this.props.profileInfo;\n        \n        return (\n            <div>\n                <p>     </p>\n                <img src={img} alt=\"Profile\" />\n                <div>Name: {name}</div>\n                <div>Age: {age} </div>\n                <div>Hobbies: </div>\n                {\n                    hobbies.map((element, index) => {\n                        return (<p key={\"hobby\" + index} >{element}</p>);\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from './Profile';\n\nexport default class ProfilePage extends React.Component {\n    render() {\n        const hobbies = [\"Knitting\", \"Gaming\", \"Bird Watching\"];\n\n        const profileOne = {\n            name: \"hello123456\",\n            age: \"61\",\n            img: \"http://placeimg.com/640/480/any\",\n            hobbies: hobbies\n        };\n    \n        const profileTwo = {\n          name: \"Anders\",\n          age: \"6\",\n          img: \"http://placeimg.com/640/480/any\",\n          hobbies: hobbies\n      };\n    \n        const profiles = [profileOne, profileTwo];\n\n        return (\n            <div className=\"App App-header\">\n            {\n            profiles.map((profile, index) => {\n                return <Profile key={\"profile\" + index} profileInfo={profile} />\n            })\n            }\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\n\nexport default class ButtonWithProps extends React.Component {\n    handleClick = (event) => {\n        this.props.informButtonPage(\"Button with Props was clicked\");\n    }\n\n    render() {\n        const { buttonText, customStyle } = this.props;\n\n        return (\n            <button onClick={this.handleClick} style={customStyle}>{buttonText ? buttonText : \"Submit\"}</button>\n            // <button className=\"btn pink\">{buttonText}</button>\n        );\n    }\n}","import React from 'react';\n\nexport default class ButtonWithChild extends React.Component {\n    render() {\n        const { children, informButtonPage } = this.props;\n\n        return (\n            <button onClick={() => informButtonPage(\"Button with Child was clicked\")}>{children}</button>\n        );\n    }\n}\n","import React from 'react';\nimport ButtonWithProps from './ButtonWithProps';\nimport \"./ButtonPage.css\"\nimport ButtonWithChild from './ButtonWithChild';\n\nexport default class ButtonPage extends React.Component {\n  handleButtonClicks = (text) => {\n    console.log(text);\n  };\n\n  render() {\n    return (\n        <div>\n            This is the button page.\n            <ButtonWithProps informButtonPage={this.handleButtonClicks} />\n            <ButtonWithProps buttonText=\"This is my custom button text\" customStyle={{backgroundColor: \"red\"}} informButtonPage={this.handleButtonClicks}/>\n            <ButtonWithProps buttonText=\"This is another button\" customStyle={{backgroundColor: \"blue\"}} informButtonPage={this.handleButtonClicks}/>\n\n            <ButtonWithChild informButtonPage={this.handleButtonClicks} >\n              This is a child\n            </ButtonWithChild>\n        </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ButtonWithProps from \"../button/ButtonWithProps\";\n\nexport default class ThemePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            color: \"\"\n        }\n    }\n\n    submitColorChange = () => {\n        this.props.onColorChange(this.state.color);\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        console.log(this.props);\n\n        return (\n            <div>\n                <h1>Theme Page</h1>\n                <input type=\"color\" onChange={event => this.setState({color: event.target.value})}></input>\n                <ButtonWithProps informButtonPage={this.submitColorChange}/>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\n\nexport default class FormPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            lastName: \"\"\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    onSubmit = () => {\n        const { firstName, lastName } = this.state;\n\n        console.log(`Your first name is ${firstName}.`);\n        console.log(`Your last name is ${lastName}.`);\n\n        this.props.onUserSubmit({firstName, lastName});\n    }\n\n    render() {\n        const { firstName, lastName } = this.state;\n\n        return (\n            <div>\n                <input id=\"firstName\" placeholder=\"first name\" onChange={this.handleChange} value={firstName} />\n                <input id=\"lastName\" placeholder=\"last name\" onChange={this.handleChange} value={lastName} />\n                <button onClick={this.onSubmit}>Submit</button>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactTable from 'react-table'\nimport 'react-table/react-table.css'\n\nexport default class CitiesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cities: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://indian-cities-api-nocbegfhqg.now.sh/cities\")\n            .then(response => response.json())\n            .then(cities => this.setState({cities}));\n    }\n\n    render() {\n        /* const hardCodedCities = [\n            {name: \"Copenhagen\", language: \"Danish\", country: \"Denmark\"},\n            {name: \"Paris\", language: \"French\", country: \"France\"},\n        ]; */\n\n        console.log(this.state.cities);\n\n        return (\n            <div>\n                <table>\n                <tbody>\n                    <tr>\n                        <th>City</th>\n                        <th>State</th>\n                        <th>District</th>\n                    </tr>\n                        { this.state.cities.map((city, index) => {\n/*                             return (\n                                <tr key={\"cityrow\" + index}>\n                                    <td>{city.City}</td>\n                                    <td>{city.State}</td>\n                                    <td>{city.District}</td>\n                                </tr>\n                            ) */\n                        })}\n                    </tbody>\n                </table>\n\n                <ReactTable \n                    columns={[\n                        {\n                            Header: \"City\",\n                            accessor: \"City\"\n                        },\n                        {\n                            Header: \"State\",\n                            accessor: \"State\"\n                        },\n                        {\n                            Header: \"District\",\n                            accessor: \"District\"\n                        }\n                    ]}\n                    data={this.state.cities}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport ProfilePage from './components/profile/ProfilePage'; \nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport ButtonPage from './components/button/ButtonPage';\nimport ThemePage from './components/theme/ThemePage';\nimport FormPage from './components/form/FormPage';\nimport CitiesPage from './components/cities/CitiesPage'\nimport { FaBeer, FaSurprise, FaSmileBeam } from 'react-icons/fa';\nimport { WiSolarEclipse, WiCloud } from 'react-icons/wi'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundColor: \"\",\n      firstName: \"\",\n      lastName: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // guaranteed that this gets called when app is rendered for the first time  \n    const color = localStorage.getItem('backgroundColor');\n    this.setState({backgroundColor: color ? color : '#03dbfc'});\n  }\n\n  handleColorChange = (color) => {\n    this.setState({backgroundColor: color});\n    localStorage.setItem('backgroundColor', color);\n  }\n\n  handleUserSubmit = ({ firstName, lastName }) => {\n    this.setState({firstName, lastName});\n  }\n\n  render() {\n    const { backgroundColor, firstName, lastName } = this.state;\n\n    return (\n      <Router basename=\"/weatherapp\">\n        <div className=\"entire-app\" style={{backgroundColor: backgroundColor}}>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/profile\">Profile</Link>\n              </li>\n              <li>\n                <Link to=\"/buttons\">Buttons</Link>\n              </li>\n              <li>\n                <Link to=\"/form\">Form</Link>\n              </li>\n              <li>\n                <Link to=\"/theme\">Theme</Link>\n              </li>\n              <li>\n                <Link to=\"/cities\">Cities</Link>\n              </li>\n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route exact path=\"/\">\n              { firstName === \"\" && lastName === \"\" ? \n                  <div>Hello Stranger <FaSurprise /></div> \n                  : \n                  <div>Welcome back {firstName + \" \" + lastName} <FaSmileBeam /></div>}\n                  <FaBeer className='beer' />\n                  <WiSolarEclipse />\n                  <WiCloud />\n            </Route>\n            <Route exact path=\"/profile\" component={ProfilePage} />\n            <Route exact path=\"/buttons\" component={ButtonPage} />\n            <Route exact path=\"/theme\" component={(props) => <ThemePage {...props} onColorChange={this.handleColorChange}/>}  />\n            <Route exact path=\"/form\" component={(props) => <FormPage {...props} onUserSubmit={this.handleUserSubmit} />} /> \n            <Route exact path=\"/cities\" component={(props) => <CitiesPage />} />                             \n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}